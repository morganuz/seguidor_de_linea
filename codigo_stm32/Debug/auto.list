
auto.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080030a8  080030a8  000040a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b8  080030b8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080030b8  080030b8  000040b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030c0  080030c0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030c0  080030c0  000040c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030c4  080030c4  000040c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080030c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000078  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009550  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001788  00000000  00000000  0000e58c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0000fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000088a  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd4c  00000000  00000000  000110c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a69c  00000000  00000000  00030e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c598e  00000000  00000000  0003b4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100e38  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ed0  00000000  00000000  00100e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00103d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003090 	.word	0x08003090

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003090 	.word	0x08003090

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <statechart_init>:
static statechart_event statechart_get_next_event(Statechart* handle);
static sc_boolean statechart_dispatch_next_event(Statechart* handle);


void statechart_init(Statechart* handle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	sc_integer i;
	
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e007      	b.n	8000512 <statechart_init+0x1e>
	{
		handle->stateConfVector[i] = Statechart_last_state;
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	4413      	add	r3, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < STATECHART_MAX_ORTHOGONAL_STATES; ++i)
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b00      	cmp	r3, #0
 8000516:	ddf4      	ble.n	8000502 <statechart_init+0xe>
	}
	
				
	clear_in_events(handle);
 8000518:	6878      	ldr	r0, [r7, #4]
 800051a:	f000 f826 	bl	800056a <clear_in_events>
	
	
	
	handle->isExecuting = bool_false;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	71da      	strb	r2, [r3, #7]
	statechart_eventqueue_init(&handle->in_event_queue, handle->in_buffer, STATECHART_IN_EVENTQUEUE_BUFFERSIZE);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f103 0008 	add.w	r0, r3, #8
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	331c      	adds	r3, #28
 800052e:	2214      	movs	r2, #20
 8000530:	4619      	mov	r1, r3
 8000532:	f000 fa46 	bl	80009c2 <statechart_eventqueue_init>
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <statechart_enter>:

void statechart_enter(Statechart* handle)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
	/* Activates the state machine. */
	if (handle->isExecuting == bool_true)
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	79db      	ldrb	r3, [r3, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d109      	bne.n	8000562 <statechart_enter+0x24>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2201      	movs	r2, #1
 8000552:	71da      	strb	r2, [r3, #7]
	/* Default enter sequence for statechart Statechart */
	enseq_main_region_default(handle);
 8000554:	6878      	ldr	r0, [r7, #4]
 8000556:	f000 f94c 	bl	80007f2 <enseq_main_region_default>
	handle->isExecuting = bool_false;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	71da      	strb	r2, [r3, #7]
 8000560:	e000      	b.n	8000564 <statechart_enter+0x26>
		return;
 8000562:	bf00      	nop
}
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <clear_in_events>:
		}
		return result;
	}

static void clear_in_events(Statechart* handle)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
	handle->iface.sensorIzqON_raised = bool_false;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2200      	movs	r2, #0
 8000576:	705a      	strb	r2, [r3, #1]
	handle->iface.sensorIzqOFF_raised = bool_false;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	709a      	strb	r2, [r3, #2]
	handle->iface.sensorDerON_raised = bool_false;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2200      	movs	r2, #0
 8000582:	70da      	strb	r2, [r3, #3]
	handle->iface.sensorDerOFF_raised = bool_false;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	711a      	strb	r2, [r3, #4]
	handle->iface.ambosSensoresOFF_raised = bool_false;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	715a      	strb	r2, [r3, #5]
	handle->iface.ambosSensoresON_raised = bool_false;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	719a      	strb	r2, [r3, #6]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <micro_step>:

static void micro_step(Statechart* handle)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	switch(handle->stateConfVector[ 0 ])
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b03      	cmp	r3, #3
 80005b4:	d822      	bhi.n	80005fc <micro_step+0x58>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <micro_step+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005cd 	.word	0x080005cd
 80005c0:	080005d9 	.word	0x080005d9
 80005c4:	080005e5 	.word	0x080005e5
 80005c8:	080005f1 	.word	0x080005f1
	{
		case Statechart_main_region_recto :
		{
			main_region_recto_react(handle,-1);
 80005cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f958 	bl	8000886 <main_region_recto_react>
			break;
 80005d6:	e012      	b.n	80005fe <micro_step+0x5a>
		}
		case Statechart_main_region_girarDer :
		{
			main_region_girarDer_react(handle,-1);
 80005d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f98d 	bl	80008fc <main_region_girarDer_react>
			break;
 80005e2:	e00c      	b.n	80005fe <micro_step+0x5a>
		}
		case Statechart_main_region_girarIzq :
		{
			main_region_girarIzq_react(handle,-1);
 80005e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f9a8 	bl	800093e <main_region_girarIzq_react>
			break;
 80005ee:	e006      	b.n	80005fe <micro_step+0x5a>
		}
		case Statechart_main_region_retroceso :
		{
			main_region_retroceso_react(handle,-1);
 80005f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f9c3 	bl	8000980 <main_region_retroceso_react>
			break;
 80005fa:	e000      	b.n	80005fe <micro_step+0x5a>
		}
		default: 
			/* do nothing */
			break;
 80005fc:	bf00      	nop
	}
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop

08000608 <run_cycle>:

static void run_cycle(Statechart* handle)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	/* Performs a 'run to completion' step. */
	if (handle->isExecuting == bool_true)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	79db      	ldrb	r3, [r3, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d115      	bne.n	8000644 <run_cycle+0x3c>
	{ 
		return;
	} 
	handle->isExecuting = bool_true;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2201      	movs	r2, #1
 800061c:	71da      	strb	r2, [r3, #7]
	statechart_dispatch_next_event(handle);
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 fada 	bl	8000bd8 <statechart_dispatch_next_event>
	do
	{ 
		micro_step(handle);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff ffbd 	bl	80005a4 <micro_step>
		clear_in_events(handle);
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff ff9d 	bl	800056a <clear_in_events>
	} while (statechart_dispatch_next_event(handle) == bool_true);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 fad1 	bl	8000bd8 <statechart_dispatch_next_event>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f3      	bne.n	8000624 <run_cycle+0x1c>
	handle->isExecuting = bool_false;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	71da      	strb	r2, [r3, #7]
 8000642:	e000      	b.n	8000646 <run_cycle+0x3e>
		return;
 8000644:	bf00      	nop
}
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <statechart_raise_sensorIzqON>:


void statechart_raise_sensorIzqON(Statechart* handle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_sensorIzqON);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3308      	adds	r3, #8
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fa49 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ffd1 	bl	8000608 <run_cycle>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <statechart_raise_sensorIzqOFF>:

void statechart_raise_sensorIzqOFF(Statechart* handle)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_sensorIzqOFF);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	3308      	adds	r3, #8
 800067a:	2102      	movs	r1, #2
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fa38 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff ffc0 	bl	8000608 <run_cycle>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <statechart_raise_sensorDerON>:

void statechart_raise_sensorDerON(Statechart* handle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_sensorDerON);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3308      	adds	r3, #8
 800069c:	2103      	movs	r1, #3
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fa27 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffaf 	bl	8000608 <run_cycle>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <statechart_raise_sensorDerOFF>:

void statechart_raise_sensorDerOFF(Statechart* handle)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_sensorDerOFF);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3308      	adds	r3, #8
 80006be:	2104      	movs	r1, #4
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fa16 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff9e 	bl	8000608 <run_cycle>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <statechart_raise_ambosSensoresOFF>:

void statechart_raise_ambosSensoresOFF(Statechart* handle)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_ambosSensoresOFF);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3308      	adds	r3, #8
 80006e0:	2105      	movs	r1, #5
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa05 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f7ff ff8d 	bl	8000608 <run_cycle>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <statechart_raise_ambosSensoresON>:

void statechart_raise_ambosSensoresON(Statechart* handle)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
	statechart_add_event_to_queue(&(handle->in_event_queue), Statechart_ambosSensoresON);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3308      	adds	r3, #8
 8000702:	2106      	movs	r1, #6
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f9f4 	bl	8000af2 <statechart_add_event_to_queue>
	run_cycle(handle);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff7c 	bl	8000608 <run_cycle>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <enact_main_region_recto>:

/* implementations of all internal functions */

/* Entry action for state 'recto'. */
static void enact_main_region_recto(Statechart* handle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'recto'. */
	statechart_arrancar(handle);
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fd3b 	bl	800119c <statechart_arrancar>
	statechart_recto(handle);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 fcae 	bl	8001088 <statechart_recto>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <enact_main_region_girarDer>:

/* Entry action for state 'girarDer'. */
static void enact_main_region_girarDer(Statechart* handle)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'girarDer'. */
	statechart_frenar(handle);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 fcff 	bl	8001140 <statechart_frenar>
	statechart_girarDer(handle);
 8000742:	6878      	ldr	r0, [r7, #4]
 8000744:	f000 fcc6 	bl	80010d4 <statechart_girarDer>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <enact_main_region_girarIzq>:

/* Entry action for state 'girarIzq'. */
static void enact_main_region_girarIzq(Statechart* handle)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'girarIzq'. */
	statechart_frenar(handle);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fcf1 	bl	8001140 <statechart_frenar>
	statechart_girarIzq(handle);
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 fcd2 	bl	8001108 <statechart_girarIzq>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <enact_main_region_retroceso>:

/* Entry action for state 'retroceso'. */
static void enact_main_region_retroceso(Statechart* handle)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	/* Entry action for state 'retroceso'. */
	statechart_retroceso(handle);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f000 fd25 	bl	80011c4 <statechart_retroceso>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <enseq_main_region_recto_default>:

/* 'default' enter sequence for state recto */
static void enseq_main_region_recto_default(Statechart* handle)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state recto */
	enact_main_region_recto(handle);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ffc4 	bl	8000718 <enact_main_region_recto>
	handle->stateConfVector[0] = Statechart_main_region_recto;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <enseq_main_region_girarDer_default>:

/* 'default' enter sequence for state girarDer */
static void enseq_main_region_girarDer_default(Statechart* handle)
{
 800079e:	b580      	push	{r7, lr}
 80007a0:	b082      	sub	sp, #8
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state girarDer */
	enact_main_region_girarDer(handle);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff ffc4 	bl	8000734 <enact_main_region_girarDer>
	handle->stateConfVector[0] = Statechart_main_region_girarDer;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <enseq_main_region_girarIzq_default>:

/* 'default' enter sequence for state girarIzq */
static void enseq_main_region_girarIzq_default(Statechart* handle)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state girarIzq */
	enact_main_region_girarIzq(handle);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffc4 	bl	8000750 <enact_main_region_girarIzq>
	handle->stateConfVector[0] = Statechart_main_region_girarIzq;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2203      	movs	r2, #3
 80007cc:	701a      	strb	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <enseq_main_region_retroceso_default>:

/* 'default' enter sequence for state retroceso */
static void enseq_main_region_retroceso_default(Statechart* handle)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for state retroceso */
	enact_main_region_retroceso(handle);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffc4 	bl	800076c <enact_main_region_retroceso>
	handle->stateConfVector[0] = Statechart_main_region_retroceso;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2204      	movs	r2, #4
 80007e8:	701a      	strb	r2, [r3, #0]
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <enseq_main_region_default>:

/* 'default' enter sequence for region main region */
static void enseq_main_region_default(Statechart* handle)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default(handle);
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f000 f838 	bl	8000870 <react_main_region__entry_Default>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <exseq_main_region_recto>:

/* Default exit sequence for state recto */
static void exseq_main_region_recto(Statechart* handle)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state recto */
	handle->stateConfVector[0] = Statechart_last_state;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <exseq_main_region_girarDer>:

/* Default exit sequence for state girarDer */
static void exseq_main_region_girarDer(Statechart* handle)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state girarDer */
	handle->stateConfVector[0] = Statechart_last_state;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <exseq_main_region_girarIzq>:

/* Default exit sequence for state girarIzq */
static void exseq_main_region_girarIzq(Statechart* handle)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state girarIzq */
	handle->stateConfVector[0] = Statechart_last_state;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <exseq_main_region_retroceso>:

/* Default exit sequence for state retroceso */
static void exseq_main_region_retroceso(Statechart* handle)
{
 8000856:	b480      	push	{r7}
 8000858:	b083      	sub	sp, #12
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	/* Default exit sequence for state retroceso */
	handle->stateConfVector[0] = Statechart_last_state;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <react_main_region__entry_Default>:
	}
}

/* Default react sequence for initial entry  */
static void react_main_region__entry_Default(Statechart* handle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	/* Default react sequence for initial entry  */
	enseq_main_region_recto_default(handle);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff82 	bl	8000782 <enseq_main_region_recto_default>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <main_region_recto_react>:


static sc_integer main_region_recto_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b084      	sub	sp, #16
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	/* The reactions of state recto. */
 			sc_integer transitioned_after = transitioned_before;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	60fb      	str	r3, [r7, #12]
	if ((transitioned_after) < (0))
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	2b00      	cmp	r3, #0
 8000898:	da25      	bge.n	80008e6 <main_region_recto_react+0x60>
	{ 
		if (handle->iface.sensorIzqON_raised == bool_true)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d008      	beq.n	80008b4 <main_region_recto_react+0x2e>
		{ 
			exseq_main_region_recto(handle);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb0 	bl	8000808 <exseq_main_region_recto>
			enseq_main_region_girarDer_default(handle);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff78 	bl	800079e <enseq_main_region_girarDer_default>
			transitioned_after = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e018      	b.n	80008e6 <main_region_recto_react+0x60>
		}  else
		{
			if (handle->iface.sensorDerON_raised == bool_true)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d008      	beq.n	80008ce <main_region_recto_react+0x48>
			{ 
				exseq_main_region_recto(handle);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffa3 	bl	8000808 <exseq_main_region_recto>
				enseq_main_region_girarIzq_default(handle);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff ff79 	bl	80007ba <enseq_main_region_girarIzq_default>
				transitioned_after = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e00b      	b.n	80008e6 <main_region_recto_react+0x60>
			}  else
			{
				if (handle->iface.ambosSensoresON_raised == bool_true)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d007      	beq.n	80008e6 <main_region_recto_react+0x60>
				{ 
					exseq_main_region_recto(handle);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff96 	bl	8000808 <exseq_main_region_recto>
					enseq_main_region_retroceso_default(handle);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff7a 	bl	80007d6 <enseq_main_region_retroceso_default>
					transitioned_after = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
				} 
			}
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d101      	bne.n	80008f2 <main_region_recto_react+0x6c>
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	60fb      	str	r3, [r7, #12]
	} 
	return transitioned_after;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <main_region_girarDer_react>:

static sc_integer main_region_girarDer_react(Statechart* handle, const sc_integer transitioned_before)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	/* The reactions of state girarDer. */
 			sc_integer transitioned_after = transitioned_before;
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	60fb      	str	r3, [r7, #12]
	if ((transitioned_after) < (0))
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	da0b      	bge.n	8000928 <main_region_girarDer_react+0x2c>
	{ 
		if (handle->iface.sensorIzqOFF_raised == bool_true)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <main_region_girarDer_react+0x2c>
		{ 
			exseq_main_region_girarDer(handle);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff82 	bl	8000822 <exseq_main_region_girarDer>
			enseq_main_region_recto_default(handle);
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff2f 	bl	8000782 <enseq_main_region_recto_default>
			transitioned_after = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d101      	bne.n	8000934 <main_region_girarDer_react+0x38>
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	60fb      	str	r3, [r7, #12]
	} 
	return transitioned_after;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <main_region_girarIzq_react>:

static sc_integer main_region_girarIzq_react(Statechart* handle, const sc_integer transitioned_before)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
	/* The reactions of state girarIzq. */
 			sc_integer transitioned_after = transitioned_before;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	60fb      	str	r3, [r7, #12]
	if ((transitioned_after) < (0))
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	da0b      	bge.n	800096a <main_region_girarIzq_react+0x2c>
	{ 
		if (handle->iface.sensorDerOFF_raised == bool_true)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d007      	beq.n	800096a <main_region_girarIzq_react+0x2c>
		{ 
			exseq_main_region_girarIzq(handle);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ff6e 	bl	800083c <exseq_main_region_girarIzq>
			enseq_main_region_recto_default(handle);
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ff0e 	bl	8000782 <enseq_main_region_recto_default>
			transitioned_after = 0;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	429a      	cmp	r2, r3
 8000970:	d101      	bne.n	8000976 <main_region_girarIzq_react+0x38>
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	60fb      	str	r3, [r7, #12]
	} 
	return transitioned_after;
 8000976:	68fb      	ldr	r3, [r7, #12]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <main_region_retroceso_react>:

static sc_integer main_region_retroceso_react(Statechart* handle, const sc_integer transitioned_before)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	/* The reactions of state retroceso. */
 			sc_integer transitioned_after = transitioned_before;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	60fb      	str	r3, [r7, #12]
	if ((transitioned_after) < (0))
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da0b      	bge.n	80009ac <main_region_retroceso_react+0x2c>
	{ 
		if (handle->iface.ambosSensoresOFF_raised == bool_true)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	795b      	ldrb	r3, [r3, #5]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d007      	beq.n	80009ac <main_region_retroceso_react+0x2c>
		{ 
			exseq_main_region_retroceso(handle);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff5a 	bl	8000856 <exseq_main_region_retroceso>
			enseq_main_region_recto_default(handle);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff feed 	bl	8000782 <enseq_main_region_recto_default>
			transitioned_after = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
		} 
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d101      	bne.n	80009b8 <main_region_retroceso_react+0x38>
	{ 
		/* then execute local reactions. */
		transitioned_after = transitioned_before;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	60fb      	str	r3, [r7, #12]
	} 
	return transitioned_after;
 80009b8:	68fb      	ldr	r3, [r7, #12]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3710      	adds	r7, #16
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <statechart_eventqueue_init>:




static void statechart_eventqueue_init(statechart_eventqueue * eq, statechart_event *buffer, sc_integer capacity)
{
 80009c2:	b480      	push	{r7}
 80009c4:	b085      	sub	sp, #20
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
	eq->events = buffer;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	601a      	str	r2, [r3, #0]
	eq->capacity = capacity;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	605a      	str	r2, [r3, #4]
	eq->push_index = 0;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	60da      	str	r2, [r3, #12]
	eq->pop_index = 0;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
	eq->size = 0;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <statechart_eventqueue_size>:

static sc_integer statechart_eventqueue_size(statechart_eventqueue * eq)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	return eq->size;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691b      	ldr	r3, [r3, #16]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <statechart_eventqueue_pop>:

static statechart_event statechart_eventqueue_pop(statechart_eventqueue * eq)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	statechart_event event;
	if(statechart_eventqueue_size(eq) <= 0) {
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ffed 	bl	80009f8 <statechart_eventqueue_size>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	dc06      	bgt.n	8000a32 <statechart_eventqueue_pop+0x22>
		statechart_event_init(&event, Statechart_invalid_event);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f852 	bl	8000ad4 <statechart_event_init>
 8000a30:	e01b      	b.n	8000a6a <statechart_eventqueue_pop+0x5a>
	}
	else {
		event = eq->events[eq->pop_index];
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6892      	ldr	r2, [r2, #8]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	733b      	strb	r3, [r7, #12]
		
		if(eq->pop_index < eq->capacity - 1) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	da05      	bge.n	8000a5a <statechart_eventqueue_pop+0x4a>
			eq->pop_index++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	e002      	b.n	8000a60 <statechart_eventqueue_pop+0x50>
		} 
		else {
			eq->pop_index = 0;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
		}
		eq->size--;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	691b      	ldr	r3, [r3, #16]
 8000a64:	1e5a      	subs	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	611a      	str	r2, [r3, #16]
	}
	return event;
 8000a6a:	7b3b      	ldrb	r3, [r7, #12]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <statechart_eventqueue_push>:
static sc_boolean statechart_eventqueue_push(statechart_eventqueue * eq, statechart_event ev)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	7039      	strb	r1, [r7, #0]
	if(statechart_eventqueue_size(eq) == eq->capacity) {
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ffba 	bl	80009f8 <statechart_eventqueue_size>
 8000a84:	4602      	mov	r2, r0
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d101      	bne.n	8000a92 <statechart_eventqueue_push+0x1e>
		return bool_false;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e01c      	b.n	8000acc <statechart_eventqueue_push+0x58>
	}
	else {
		eq->events[eq->push_index] = ev;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	68d2      	ldr	r2, [r2, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	783a      	ldrb	r2, [r7, #0]
 8000a9e:	701a      	strb	r2, [r3, #0]
		
		if(eq->push_index < eq->capacity - 1) {
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	da05      	bge.n	8000aba <statechart_eventqueue_push+0x46>
			eq->push_index++;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	e002      	b.n	8000ac0 <statechart_eventqueue_push+0x4c>
		}
		else {
			eq->push_index = 0;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
		}
		eq->size++;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	611a      	str	r2, [r3, #16]
		
		return bool_true;
 8000aca:	2301      	movs	r3, #1
	}
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <statechart_event_init>:
static void statechart_event_init(statechart_event * ev, StatechartEventID name)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	ev->name = name;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	701a      	strb	r2, [r3, #0]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <statechart_add_event_to_queue>:

static void statechart_add_event_to_queue(statechart_eventqueue * eq, StatechartEventID name)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b084      	sub	sp, #16
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	70fb      	strb	r3, [r7, #3]
	statechart_event event;
	statechart_event_init(&event, name);
 8000afe:	78fa      	ldrb	r2, [r7, #3]
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffe4 	bl	8000ad4 <statechart_event_init>
	statechart_eventqueue_push(eq, event);
 8000b0c:	7b39      	ldrb	r1, [r7, #12]
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ffb0 	bl	8000a74 <statechart_eventqueue_push>
}
 8000b14:	bf00      	nop
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <statechart_dispatch_event>:

static sc_boolean statechart_dispatch_event(Statechart* handle, const statechart_event * event) {
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
	switch(event->name) {
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d82d      	bhi.n	8000b8c <statechart_dispatch_event+0x70>
 8000b30:	a201      	add	r2, pc, #4	@ (adr r2, 8000b38 <statechart_dispatch_event+0x1c>)
 8000b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b36:	bf00      	nop
 8000b38:	08000b51 	.word	0x08000b51
 8000b3c:	08000b5b 	.word	0x08000b5b
 8000b40:	08000b65 	.word	0x08000b65
 8000b44:	08000b6f 	.word	0x08000b6f
 8000b48:	08000b79 	.word	0x08000b79
 8000b4c:	08000b83 	.word	0x08000b83
		case Statechart_sensorIzqON:
		{
			handle->iface.sensorIzqON_raised = bool_true;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	705a      	strb	r2, [r3, #1]
			return bool_true;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e019      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		case Statechart_sensorIzqOFF:
		{
			handle->iface.sensorIzqOFF_raised = bool_true;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	709a      	strb	r2, [r3, #2]
			return bool_true;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e014      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		case Statechart_sensorDerON:
		{
			handle->iface.sensorDerON_raised = bool_true;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2201      	movs	r2, #1
 8000b68:	70da      	strb	r2, [r3, #3]
			return bool_true;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e00f      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		case Statechart_sensorDerOFF:
		{
			handle->iface.sensorDerOFF_raised = bool_true;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2201      	movs	r2, #1
 8000b72:	711a      	strb	r2, [r3, #4]
			return bool_true;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e00a      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		case Statechart_ambosSensoresOFF:
		{
			handle->iface.ambosSensoresOFF_raised = bool_true;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	715a      	strb	r2, [r3, #5]
			return bool_true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e005      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		case Statechart_ambosSensoresON:
		{
			handle->iface.ambosSensoresON_raised = bool_true;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	719a      	strb	r2, [r3, #6]
			return bool_true;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e000      	b.n	8000b8e <statechart_dispatch_event+0x72>
		}
		default:
			return bool_false;
 8000b8c:	2300      	movs	r3, #0
	}
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <statechart_get_next_event>:

static statechart_event statechart_get_next_event(Statechart* handle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	statechart_event next_event;
	statechart_event_init(&next_event, Statechart_invalid_event);
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff92 	bl	8000ad4 <statechart_event_init>
	if(statechart_eventqueue_size(&(handle->in_event_queue)) > 0) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff1f 	bl	80009f8 <statechart_eventqueue_size>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd06      	ble.n	8000bce <statechart_get_next_event+0x32>
		next_event = statechart_eventqueue_pop(&(handle->in_event_queue));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff23 	bl	8000a10 <statechart_eventqueue_pop>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	733b      	strb	r3, [r7, #12]
	}
	return next_event;
 8000bce:	7b3b      	ldrb	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <statechart_dispatch_next_event>:

static sc_boolean statechart_dispatch_next_event(Statechart* handle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	statechart_event nextEvent;
	nextEvent = statechart_get_next_event(handle);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ffdb 	bl	8000b9c <statechart_get_next_event>
 8000be6:	4603      	mov	r3, r0
 8000be8:	733b      	strb	r3, [r7, #12]
	return statechart_dispatch_event(handle, &nextEvent);
 8000bea:	f107 030c 	add.w	r3, r7, #12
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ff93 	bl	8000b1c <statechart_dispatch_event>
 8000bf6:	4603      	mov	r3, r0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08c      	sub	sp, #48	@ 0x30
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 fbfd 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f86f 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 f957 	bl	8000ec0 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000c12:	f000 f8d3 	bl	8000dbc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  statechart_init(&modelo_auto);
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc6b 	bl	80004f4 <statechart_init>
  statechart_enter(&modelo_auto);
 8000c1e:	463b      	mov	r3, r7
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fc8c 	bl	800053e <statechart_enter>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000c26:	2100      	movs	r1, #0
 8000c28:	482b      	ldr	r0, [pc, #172]	@ (8000cd8 <main+0xd8>)
 8000c2a:	f001 fc21 	bl	8002470 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000c2e:	2104      	movs	r1, #4
 8000c30:	4829      	ldr	r0, [pc, #164]	@ (8000cd8 <main+0xd8>)
 8000c32:	f001 fc1d 	bl	8002470 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cambioSensorIzqAsc == 1 && cambioSensorDerAsc == 1){
 8000c36:	4b29      	ldr	r3, [pc, #164]	@ (8000cdc <main+0xdc>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10d      	bne.n	8000c5a <main+0x5a>
 8000c3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ce0 <main+0xe0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d109      	bne.n	8000c5a <main+0x5a>
		  statechart_raise_ambosSensoresON(&modelo_auto);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fd54 	bl	80006f6 <statechart_raise_ambosSensoresON>
		  cambioSensorIzqAsc = 0; cambioSensorDerAsc = 0;
 8000c4e:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <main+0xdc>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <main+0xe0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
	  }
	  if (cambioSensorIzqDesc == 1 && cambioSensorDerDesc == 1){
 8000c5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <main+0xe4>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d10d      	bne.n	8000c7e <main+0x7e>
 8000c62:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <main+0xe8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d109      	bne.n	8000c7e <main+0x7e>
		  statechart_raise_ambosSensoresOFF(&modelo_auto);
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fd31 	bl	80006d4 <statechart_raise_ambosSensoresOFF>
		  cambioSensorIzqDesc = 0; cambioSensorDerDesc = 0;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <main+0xe4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <main+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	  }

	  if (cambioSensorIzqAsc == 1){
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <main+0xdc>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d106      	bne.n	8000c94 <main+0x94>
		  statechart_raise_sensorIzqON(&modelo_auto);
 8000c86:	463b      	mov	r3, r7
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fcdf 	bl	800064c <statechart_raise_sensorIzqON>
		  cambioSensorIzqAsc=0;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <main+0xdc>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
	  }
	  if (cambioSensorDerAsc == 1) {
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <main+0xe0>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d106      	bne.n	8000caa <main+0xaa>
		  statechart_raise_sensorDerON(&modelo_auto);
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fcf6 	bl	8000690 <statechart_raise_sensorDerON>
		  cambioSensorDerAsc=0;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <main+0xe0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
	  }
	  if (cambioSensorIzqDesc == 1){
 8000caa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce4 <main+0xe4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d106      	bne.n	8000cc0 <main+0xc0>
		  statechart_raise_sensorIzqOFF(&modelo_auto);
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fcda 	bl	800066e <statechart_raise_sensorIzqOFF>
		  cambioSensorIzqDesc=0;
 8000cba:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <main+0xe4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	  }
	  if (cambioSensorDerDesc == 1){
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <main+0xe8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1b6      	bne.n	8000c36 <main+0x36>
		  statechart_raise_sensorDerOFF(&modelo_auto);
 8000cc8:	463b      	mov	r3, r7
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fcf1 	bl	80006b2 <statechart_raise_sensorDerOFF>
		  cambioSensorDerDesc=0;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	@ (8000ce8 <main+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
	  if (cambioSensorIzqAsc == 1 && cambioSensorDerAsc == 1){
 8000cd6:	e7ae      	b.n	8000c36 <main+0x36>
 8000cd8:	20000028 	.word	0x20000028
 8000cdc:	20000070 	.word	0x20000070
 8000ce0:	20000074 	.word	0x20000074
 8000ce4:	20000078 	.word	0x20000078
 8000ce8:	2000007c 	.word	0x2000007c

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b094      	sub	sp, #80	@ 0x50
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2230      	movs	r2, #48	@ 0x30
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 f99c 	bl	8003038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <SystemClock_Config+0xc8>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	4a26      	ldr	r2, [pc, #152]	@ (8000db4 <SystemClock_Config+0xc8>)
 8000d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <SystemClock_Config+0xc8>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b21      	ldr	r3, [pc, #132]	@ (8000db8 <SystemClock_Config+0xcc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a20      	ldr	r2, [pc, #128]	@ (8000db8 <SystemClock_Config+0xcc>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3a:	6013      	str	r3, [r2, #0]
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <SystemClock_Config+0xcc>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	2310      	movs	r3, #16
 8000d52:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d54:	2302      	movs	r3, #2
 8000d56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d60:	2354      	movs	r3, #84	@ 0x54
 8000d62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 feb1 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d7c:	f000 fa42 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d80:	230f      	movs	r3, #15
 8000d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d84:	2302      	movs	r3, #2
 8000d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2102      	movs	r1, #2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 f913 	bl	8001fc8 <HAL_RCC_ClockConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000da8:	f000 fa2c 	bl	8001204 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3750      	adds	r7, #80	@ 0x50
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40007000 	.word	0x40007000

08000dbc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dec:	4b32      	ldr	r3, [pc, #200]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000dee:	4a33      	ldr	r2, [pc, #204]	@ (8000ebc <MX_TIM4_Init+0x100>)
 8000df0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 42-1;
 8000df2:	4b31      	ldr	r3, [pc, #196]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000df4:	2229      	movs	r2, #41	@ 0x29
 8000df6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df8:	4b2f      	ldr	r3, [pc, #188]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e06:	4b2c      	ldr	r3, [pc, #176]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e12:	4829      	ldr	r0, [pc, #164]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e14:	f001 fa84 	bl	8002320 <HAL_TIM_Base_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e1e:	f000 f9f1 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e26:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e28:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4822      	ldr	r0, [pc, #136]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e30:	f001 fca8 	bl	8002784 <HAL_TIM_ConfigClockSource>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e3a:	f000 f9e3 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e3e:	481e      	ldr	r0, [pc, #120]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e40:	f001 fabd 	bl	80023be <HAL_TIM_PWM_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e4a:	f000 f9db 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e56:	f107 0320 	add.w	r3, r7, #32
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4816      	ldr	r0, [pc, #88]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e5e:	f002 f86f 	bl	8002f40 <HAL_TIMEx_MasterConfigSynchronization>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e68:	f000 f9cc 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6c:	2360      	movs	r3, #96	@ 0x60
 8000e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	480d      	ldr	r0, [pc, #52]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e84:	f001 fbbc 	bl	8002600 <HAL_TIM_PWM_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e8e:	f000 f9b9 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000e9a:	f001 fbb1 	bl	8002600 <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ea4:	f000 f9ae 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ea8:	4803      	ldr	r0, [pc, #12]	@ (8000eb8 <MX_TIM4_Init+0xfc>)
 8000eaa:	f000 f9fb 	bl	80012a4 <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3738      	adds	r7, #56	@ 0x38
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000028 	.word	0x20000028
 8000ebc:	40000800 	.word	0x40000800

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a3d      	ldr	r2, [pc, #244]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b37      	ldr	r3, [pc, #220]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	4a36      	ldr	r2, [pc, #216]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000efc:	f043 0308 	orr.w	r3, r3, #8
 8000f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f02:	4b34      	ldr	r3, [pc, #208]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	f003 0308 	and.w	r3, r3, #8
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	4b30      	ldr	r3, [pc, #192]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <MX_GPIO_Init+0x114>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	482a      	ldr	r0, [pc, #168]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f30:	f000 fda0 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 41e1 	mov.w	r1, #28800	@ 0x7080
 8000f3a:	4828      	ldr	r0, [pc, #160]	@ (8000fdc <MX_GPIO_Init+0x11c>)
 8000f3c:	f000 fd9a 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	2138      	movs	r1, #56	@ 0x38
 8000f44:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <MX_GPIO_Init+0x120>)
 8000f46:	f000 fd95 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	481d      	ldr	r0, [pc, #116]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f62:	f000 fbd3 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_7;
 8000f66:	f44f 43e1 	mov.w	r3, #28800	@ 0x7080
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4817      	ldr	r0, [pc, #92]	@ (8000fdc <MX_GPIO_Init+0x11c>)
 8000f80:	f000 fbc4 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f84:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f8a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480f      	ldr	r0, [pc, #60]	@ (8000fd8 <MX_GPIO_Init+0x118>)
 8000f9c:	f000 fbb6 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000fa0:	2338      	movs	r3, #56	@ 0x38
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <MX_GPIO_Init+0x120>)
 8000fb8:	f000 fba8 	bl	800170c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2017      	movs	r0, #23
 8000fc2:	f000 fb6c 	bl	800169e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc6:	2017      	movs	r0, #23
 8000fc8:	f000 fb85 	bl	80016d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fcc:	bf00      	nop
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == senIzq){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	2b80      	cmp	r3, #128	@ 0x80
 8000ff2:	d11a      	bne.n	800102a <HAL_GPIO_EXTI_Callback+0x46>
			if (HAL_GPIO_ReadPin(GPIOC,senIzq) == GPIO_PIN_SET){
 8000ff4:	2180      	movs	r1, #128	@ 0x80
 8000ff6:	481e      	ldr	r0, [pc, #120]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000ff8:	f000 fd24 	bl	8001a44 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d109      	bne.n	8001016 <HAL_GPIO_EXTI_Callback+0x32>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	481a      	ldr	r0, [pc, #104]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x90>)
 800100a:	f000 fd33 	bl	8001a74 <HAL_GPIO_WritePin>
				cambioSensorIzqAsc = 1;
 800100e:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <HAL_GPIO_EXTI_Callback+0x94>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
				cambioSensorDerDesc = 1;
			}

		}
}
 8001014:	e028      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x84>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800101c:	4815      	ldr	r0, [pc, #84]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x90>)
 800101e:	f000 fd29 	bl	8001a74 <HAL_GPIO_WritePin>
				cambioSensorIzqDesc = 1;
 8001022:	4b16      	ldr	r3, [pc, #88]	@ (800107c <HAL_GPIO_EXTI_Callback+0x98>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
}
 8001028:	e01e      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x84>
		} else if (GPIO_Pin == senDer){
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001030:	d11a      	bne.n	8001068 <HAL_GPIO_EXTI_Callback+0x84>
			if (HAL_GPIO_ReadPin(GPIOC,senDer) == GPIO_PIN_SET){
 8001032:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001038:	f000 fd04 	bl	8001a44 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d109      	bne.n	8001056 <HAL_GPIO_EXTI_Callback+0x72>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001048:	480a      	ldr	r0, [pc, #40]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x90>)
 800104a:	f000 fd13 	bl	8001a74 <HAL_GPIO_WritePin>
				cambioSensorDerAsc = 1;
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	e008      	b.n	8001068 <HAL_GPIO_EXTI_Callback+0x84>
				HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <HAL_GPIO_EXTI_Callback+0x90>)
 800105e:	f000 fd09 	bl	8001a74 <HAL_GPIO_WritePin>
				cambioSensorDerDesc = 1;
 8001062:	4b08      	ldr	r3, [pc, #32]	@ (8001084 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40020800 	.word	0x40020800
 8001074:	40020c00 	.word	0x40020c00
 8001078:	20000070 	.word	0x20000070
 800107c:	20000078 	.word	0x20000078
 8001080:	20000074 	.word	0x20000074
 8001084:	2000007c 	.word	0x2000007c

08001088 <statechart_recto>:


void statechart_recto( Statechart* handle){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, izqM0, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2180      	movs	r1, #128	@ 0x80
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <statechart_recto+0x44>)
 8001096:	f000 fced 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, izqM1,GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2110      	movs	r1, #16
 800109e:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <statechart_recto+0x48>)
 80010a0:	f000 fce8 	bl	8001a74 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, derM0,GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	2108      	movs	r1, #8
 80010a8:	4809      	ldr	r0, [pc, #36]	@ (80010d0 <statechart_recto+0x48>)
 80010aa:	f000 fce3 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, derM1,GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <statechart_recto+0x48>)
 80010b4:	f000 fcde 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010be:	4803      	ldr	r0, [pc, #12]	@ (80010cc <statechart_recto+0x44>)
 80010c0:	f000 fcd8 	bl	8001a74 <HAL_GPIO_WritePin>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40020400 	.word	0x40020400

080010d4 <statechart_girarDer>:
void statechart_bajarVelocidad(Statechart* handle){
	TIM4->CCR1 = 6000;
	TIM4->CCR2 = 6000;

}
void statechart_girarDer(Statechart* handle){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, izqM0,GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2180      	movs	r1, #128	@ 0x80
 80010e0:	4807      	ldr	r0, [pc, #28]	@ (8001100 <statechart_girarDer+0x2c>)
 80010e2:	f000 fcc7 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, izqM1,GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2110      	movs	r1, #16
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <statechart_girarDer+0x2c>)
 80010ec:	f000 fcc2 	bl	8001a74 <HAL_GPIO_WritePin>
	TIM4->CCR1 = VELGIRO;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <statechart_girarDer+0x30>)
 80010f2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40020400 	.word	0x40020400
 8001104:	40000800 	.word	0x40000800

08001108 <statechart_girarIzq>:

void statechart_girarIzq(Statechart* handle){
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, derM0, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	4807      	ldr	r0, [pc, #28]	@ (8001134 <statechart_girarIzq+0x2c>)
 8001116:	f000 fcad 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, derM1,GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	4806      	ldr	r0, [pc, #24]	@ (8001138 <statechart_girarIzq+0x30>)
 8001120:	f000 fca8 	bl	8001a74 <HAL_GPIO_WritePin>
	TIM4->CCR2 = VELGIRO;
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <statechart_girarIzq+0x34>)
 8001126:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 800112a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020c00 	.word	0x40020c00
 8001138:	40020400 	.word	0x40020400
 800113c:	40000800 	.word	0x40000800

08001140 <statechart_frenar>:

void statechart_frenar(Statechart* handle){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, izqM0, GPIO_PIN_SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2180      	movs	r1, #128	@ 0x80
 800114c:	4810      	ldr	r0, [pc, #64]	@ (8001190 <statechart_frenar+0x50>)
 800114e:	f000 fc91 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, izqM1,GPIO_PIN_SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	480f      	ldr	r0, [pc, #60]	@ (8001194 <statechart_frenar+0x54>)
 8001158:	f000 fc8c 	bl	8001a74 <HAL_GPIO_WritePin>
	TIM4->CCR1 = 0;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <statechart_frenar+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_GPIO_WritePin(GPIOB, derM0,GPIO_PIN_SET);
 8001162:	2201      	movs	r2, #1
 8001164:	2108      	movs	r1, #8
 8001166:	480b      	ldr	r0, [pc, #44]	@ (8001194 <statechart_frenar+0x54>)
 8001168:	f000 fc84 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, derM1,GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4808      	ldr	r0, [pc, #32]	@ (8001194 <statechart_frenar+0x54>)
 8001172:	f000 fc7f 	bl	8001a74 <HAL_GPIO_WritePin>
	TIM4->CCR2 = 0;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <statechart_frenar+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <statechart_frenar+0x50>)
 8001184:	f000 fc76 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020c00 	.word	0x40020c00
 8001194:	40020400 	.word	0x40020400
 8001198:	40000800 	.word	0x40000800

0800119c <statechart_arrancar>:

void statechart_arrancar(Statechart * handle){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = VELRECTO;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <statechart_arrancar+0x24>)
 80011a6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80011aa:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4->CCR2 = VELRECTO;
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <statechart_arrancar+0x24>)
 80011ae:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80011b2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40000800 	.word	0x40000800

080011c4 <statechart_retroceso>:

void statechart_retroceso(Statechart *handle){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, izqM0, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2180      	movs	r1, #128	@ 0x80
 80011d0:	480a      	ldr	r0, [pc, #40]	@ (80011fc <statechart_retroceso+0x38>)
 80011d2:	f000 fc4f 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, izqM1,GPIO_PIN_SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2110      	movs	r1, #16
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <statechart_retroceso+0x3c>)
 80011dc:	f000 fc4a 	bl	8001a74 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, derM0,GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2108      	movs	r1, #8
 80011e4:	4806      	ldr	r0, [pc, #24]	@ (8001200 <statechart_retroceso+0x3c>)
 80011e6:	f000 fc45 	bl	8001a74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, derM1,GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2120      	movs	r1, #32
 80011ee:	4804      	ldr	r0, [pc, #16]	@ (8001200 <statechart_retroceso+0x3c>)
 80011f0:	f000 fc40 	bl	8001a74 <HAL_GPIO_WritePin>
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40020c00 	.word	0x40020c00
 8001200:	40020400 	.word	0x40020400

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <Error_Handler+0x8>

08001210 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b10      	ldr	r3, [pc, #64]	@ (800125c <HAL_MspInit+0x4c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a0f      	ldr	r2, [pc, #60]	@ (800125c <HAL_MspInit+0x4c>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b09      	ldr	r3, [pc, #36]	@ (800125c <HAL_MspInit+0x4c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_MspInit+0x4c>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	@ 0x40
 8001242:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_TIM_Base_MspInit+0x3c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10d      	bne.n	800128e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b0a      	ldr	r3, [pc, #40]	@ (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <HAL_TIM_Base_MspInit+0x40>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40000800 	.word	0x40000800
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <HAL_TIM_MspPostInit+0x68>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d11d      	bne.n	8001302 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM4_MspPostInit 0 */

    /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a10      	ldr	r2, [pc, #64]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_TIM_MspPostInit+0x6c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012e2:	23c0      	movs	r3, #192	@ 0xc0
 80012e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012ee:	2301      	movs	r3, #1
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4619      	mov	r1, r3
 80012fc:	4805      	ldr	r0, [pc, #20]	@ (8001314 <HAL_TIM_MspPostInit+0x70>)
 80012fe:	f000 fa05 	bl	800170c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspPostInit 1 */

    /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40000800 	.word	0x40000800
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <NMI_Handler+0x4>

08001320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <HardFault_Handler+0x4>

08001328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <MemManage_Handler+0x4>

08001330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <UsageFault_Handler+0x4>

08001340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136e:	f000 f89b 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}

08001376 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800137a:	2080      	movs	r0, #128	@ 0x80
 800137c:	f000 fb94 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001380:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001384:	f000 fb90 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013b4:	f7ff ffea 	bl	800138c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b8:	480c      	ldr	r0, [pc, #48]	@ (80013ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ba:	490d      	ldr	r1, [pc, #52]	@ (80013f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c0:	e002      	b.n	80013c8 <LoopCopyDataInit>

080013c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c6:	3304      	adds	r3, #4

080013c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013cc:	d3f9      	bcc.n	80013c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d0:	4c0a      	ldr	r4, [pc, #40]	@ (80013fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80013d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d4:	e001      	b.n	80013da <LoopFillZerobss>

080013d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d8:	3204      	adds	r2, #4

080013da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013dc:	d3fb      	bcc.n	80013d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f001 fe33 	bl	8003048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013e2:	f7ff fc0d 	bl	8000c00 <main>
  bx  lr    
 80013e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013f4:	080030c8 	.word	0x080030c8
  ldr r2, =_sbss
 80013f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013fc:	20000084 	.word	0x20000084

08001400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC_IRQHandler>
	...

08001404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <HAL_Init+0x40>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <HAL_Init+0x40>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_Init+0x40>)
 800141a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800141e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	@ (8001444 <HAL_Init+0x40>)
 8001426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800142a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f92b 	bl	8001688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff feea 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40023c00 	.word	0x40023c00

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f943 	bl	80016f2 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001484:	f000 f90b 	bl	800169e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	@ (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000008 	.word	0x20000008
 80014a4:	20000004 	.word	0x20000004

080014a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x20>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_IncTick+0x24>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <HAL_IncTick+0x24>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000080 	.word	0x20000080

080014d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return uwTick;
 80014d4:	4b03      	ldr	r3, [pc, #12]	@ (80014e4 <HAL_GetTick+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000080 	.word	0x20000080

080014e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fe:	68ba      	ldr	r2, [r7, #8]
 8001500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001504:	4013      	ands	r3, r2
 8001506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <__NVIC_SetPriorityGrouping+0x44>)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60d3      	str	r3, [r2, #12]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001534:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <__NVIC_GetPriorityGrouping+0x18>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 0307 	and.w	r3, r3, #7
}
 800153e:	4618      	mov	r0, r3
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	2b00      	cmp	r3, #0
 800155c:	db0b      	blt.n	8001576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 021f 	and.w	r2, r3, #31
 8001564:	4907      	ldr	r1, [pc, #28]	@ (8001584 <__NVIC_EnableIRQ+0x38>)
 8001566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	2001      	movs	r0, #1
 800156e:	fa00 f202 	lsl.w	r2, r0, r2
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100

08001588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	2b00      	cmp	r3, #0
 800159a:	db0a      	blt.n	80015b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <__NVIC_SetPriority+0x4c>)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	0112      	lsls	r2, r2, #4
 80015a8:	b2d2      	uxtb	r2, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b0:	e00a      	b.n	80015c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4908      	ldr	r1, [pc, #32]	@ (80015d8 <__NVIC_SetPriority+0x50>)
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	3b04      	subs	r3, #4
 80015c0:	0112      	lsls	r2, r2, #4
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	440b      	add	r3, r1
 80015c6:	761a      	strb	r2, [r3, #24]
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000e100 	.word	0xe000e100
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	@ 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f1c3 0307 	rsb	r3, r3, #7
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	bf28      	it	cs
 80015fa:	2304      	movcs	r3, #4
 80015fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3304      	adds	r3, #4
 8001602:	2b06      	cmp	r3, #6
 8001604:	d902      	bls.n	800160c <NVIC_EncodePriority+0x30>
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3b03      	subs	r3, #3
 800160a:	e000      	b.n	800160e <NVIC_EncodePriority+0x32>
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	43da      	mvns	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	401a      	ands	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001624:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	fa01 f303 	lsl.w	r3, r1, r3
 800162e:	43d9      	mvns	r1, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	4313      	orrs	r3, r2
         );
}
 8001636:	4618      	mov	r0, r3
 8001638:	3724      	adds	r7, #36	@ 0x24
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001654:	d301      	bcc.n	800165a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001656:	2301      	movs	r3, #1
 8001658:	e00f      	b.n	800167a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800165a:	4a0a      	ldr	r2, [pc, #40]	@ (8001684 <SysTick_Config+0x40>)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001662:	210f      	movs	r1, #15
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001668:	f7ff ff8e 	bl	8001588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800166c:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <SysTick_Config+0x40>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001672:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <SysTick_Config+0x40>)
 8001674:	2207      	movs	r2, #7
 8001676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e000e010 	.word	0xe000e010

08001688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ff29 	bl	80014e8 <__NVIC_SetPriorityGrouping>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169e:	b580      	push	{r7, lr}
 80016a0:	b086      	sub	sp, #24
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016b0:	f7ff ff3e 	bl	8001530 <__NVIC_GetPriorityGrouping>
 80016b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	68b9      	ldr	r1, [r7, #8]
 80016ba:	6978      	ldr	r0, [r7, #20]
 80016bc:	f7ff ff8e 	bl	80015dc <NVIC_EncodePriority>
 80016c0:	4602      	mov	r2, r0
 80016c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c6:	4611      	mov	r1, r2
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff5d 	bl	8001588 <__NVIC_SetPriority>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	4603      	mov	r3, r0
 80016de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff31 	bl	800154c <__NVIC_EnableIRQ>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b082      	sub	sp, #8
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff ffa2 	bl	8001644 <SysTick_Config>
 8001700:	4603      	mov	r3, r0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	@ 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e16b      	b.n	8001a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 815a 	bne.w	80019fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80b4 	beq.w	80019fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b60      	ldr	r3, [pc, #384]	@ (8001a18 <HAL_GPIO_Init+0x30c>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189a:	4a5f      	ldr	r2, [pc, #380]	@ (8001a18 <HAL_GPIO_Init+0x30c>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001a18 <HAL_GPIO_Init+0x30c>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001a1c <HAL_GPIO_Init+0x310>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a52      	ldr	r2, [pc, #328]	@ (8001a20 <HAL_GPIO_Init+0x314>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d02b      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a51      	ldr	r2, [pc, #324]	@ (8001a24 <HAL_GPIO_Init+0x318>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d025      	beq.n	800192e <HAL_GPIO_Init+0x222>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_GPIO_Init+0x31c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d01f      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4f      	ldr	r2, [pc, #316]	@ (8001a2c <HAL_GPIO_Init+0x320>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a30 <HAL_GPIO_Init+0x324>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a34 <HAL_GPIO_Init+0x328>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x212>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4c      	ldr	r2, [pc, #304]	@ (8001a38 <HAL_GPIO_Init+0x32c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a3c <HAL_GPIO_Init+0x330>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x20a>
 8001912:	2307      	movs	r3, #7
 8001914:	e00e      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001916:	2308      	movs	r3, #8
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191a:	2306      	movs	r3, #6
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x228>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x228>
 8001932:	2300      	movs	r3, #0
 8001934:	69fa      	ldr	r2, [r7, #28]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001944:	4935      	ldr	r1, [pc, #212]	@ (8001a1c <HAL_GPIO_Init+0x310>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001952:	4b3b      	ldr	r3, [pc, #236]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	43db      	mvns	r3, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4013      	ands	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001976:	4a32      	ldr	r2, [pc, #200]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197c:	4b30      	ldr	r3, [pc, #192]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a6:	4b26      	ldr	r3, [pc, #152]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f4:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <HAL_GPIO_Init+0x334>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3301      	adds	r3, #1
 80019fe:	61fb      	str	r3, [r7, #28]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	2b0f      	cmp	r3, #15
 8001a04:	f67f ae90 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ab2:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fa8c 	bl	8000fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e267      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d075      	beq.n	8001be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001af6:	4b88      	ldr	r3, [pc, #544]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d00c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b02:	4b85      	ldr	r3, [pc, #532]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d112      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4b82      	ldr	r3, [pc, #520]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b1a:	d10b      	bne.n	8001b34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d05b      	beq.n	8001be0 <HAL_RCC_OscConfig+0x108>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d157      	bne.n	8001be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e242      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b3c:	d106      	bne.n	8001b4c <HAL_RCC_OscConfig+0x74>
 8001b3e:	4b76      	ldr	r3, [pc, #472]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a75      	ldr	r2, [pc, #468]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	e01d      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b70      	ldr	r3, [pc, #448]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b6d      	ldr	r3, [pc, #436]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a6c      	ldr	r2, [pc, #432]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e00b      	b.n	8001b88 <HAL_RCC_OscConfig+0xb0>
 8001b70:	4b69      	ldr	r3, [pc, #420]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a68      	ldr	r2, [pc, #416]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4b66      	ldr	r3, [pc, #408]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a65      	ldr	r2, [pc, #404]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d013      	beq.n	8001bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fc9e 	bl	80014d0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fc9a 	bl	80014d0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e207      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	4b5b      	ldr	r3, [pc, #364]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fc8a 	bl	80014d0 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fc86 	bl	80014d0 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	@ 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e1f3      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b51      	ldr	r3, [pc, #324]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xe8>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d063      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bee:	4b4a      	ldr	r3, [pc, #296]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 030c 	and.w	r3, r3, #12
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfa:	4b47      	ldr	r3, [pc, #284]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d11c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b44      	ldr	r3, [pc, #272]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d116      	bne.n	8001c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c12:	4b41      	ldr	r3, [pc, #260]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d001      	beq.n	8001c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e1c7      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4937      	ldr	r1, [pc, #220]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	e03a      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d020      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c48:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7ff fc3f 	bl	80014d0 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c56:	f7ff fc3b 	bl	80014d0 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e1a8      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	4b2b      	ldr	r3, [pc, #172]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c74:	4b28      	ldr	r3, [pc, #160]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4925      	ldr	r1, [pc, #148]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e015      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8a:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_RCC_OscConfig+0x244>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fc1e 	bl	80014d0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c98:	f7ff fc1a 	bl	80014d0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e187      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d036      	beq.n	8001d30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d016      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cca:	4b15      	ldr	r3, [pc, #84]	@ (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fbfe 	bl	80014d0 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fbfa 	bl	80014d0 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e167      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_RCC_OscConfig+0x240>)
 8001cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x200>
 8001cf6:	e01b      	b.n	8001d30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_OscConfig+0x248>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfe:	f7ff fbe7 	bl	80014d0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d04:	e00e      	b.n	8001d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff fbe3 	bl	80014d0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d907      	bls.n	8001d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e150      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	42470000 	.word	0x42470000
 8001d20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b88      	ldr	r3, [pc, #544]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1ea      	bne.n	8001d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 8097 	beq.w	8001e6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b7d      	ldr	r3, [pc, #500]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b77      	ldr	r3, [pc, #476]	@ (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d118      	bne.n	8001dac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b74      	ldr	r3, [pc, #464]	@ (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a73      	ldr	r2, [pc, #460]	@ (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fba3 	bl	80014d0 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d8e:	f7ff fb9f 	bl	80014d0 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e10c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <HAL_RCC_OscConfig+0x474>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2ea>
 8001db4:	4b64      	ldr	r3, [pc, #400]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	4a63      	ldr	r2, [pc, #396]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc0:	e01c      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2b05      	cmp	r3, #5
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x30c>
 8001dca:	4b5f      	ldr	r3, [pc, #380]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	4a5e      	ldr	r2, [pc, #376]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dda:	4a5b      	ldr	r2, [pc, #364]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0x324>
 8001de4:	4b58      	ldr	r3, [pc, #352]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de8:	4a57      	ldr	r2, [pc, #348]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001dea:	f023 0301 	bic.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001df0:	4b55      	ldr	r3, [pc, #340]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df4:	4a54      	ldr	r2, [pc, #336]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001df6:	f023 0304 	bic.w	r3, r3, #4
 8001dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d015      	beq.n	8001e30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff fb64 	bl	80014d0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fb60 	bl	80014d0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e0cb      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e22:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0ee      	beq.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fb4e 	bl	80014d0 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e38:	f7ff fb4a 	bl	80014d0 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e0b5      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1ee      	bne.n	8001e38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5a:	7dfb      	ldrb	r3, [r7, #23]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e60:	4b39      	ldr	r3, [pc, #228]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e64:	4a38      	ldr	r2, [pc, #224]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a1 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d05c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d141      	bne.n	8001f0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e8a:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fb1e 	bl	80014d0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e98:	f7ff fb1a 	bl	80014d0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e087      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eaa:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	019b      	lsls	r3, r3, #6
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	041b      	lsls	r3, r3, #16
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed8:	061b      	lsls	r3, r3, #24
 8001eda:	491b      	ldr	r1, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff faf3 	bl	80014d0 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff faef 	bl	80014d0 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e05c      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f00:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x416>
 8001f0c:	e054      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_RCC_OscConfig+0x478>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fadc 	bl	80014d0 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fad8 	bl	80014d0 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_RCC_OscConfig+0x470>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
 8001f3a:	e03d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e038      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_RCC_OscConfig+0x4ec>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d028      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d121      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d11a      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d111      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9a:	085b      	lsrs	r3, r3, #1
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0cc      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b68      	ldr	r3, [pc, #416]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d90c      	bls.n	8002004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b65      	ldr	r3, [pc, #404]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a58      	ldr	r2, [pc, #352]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800203e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d044      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d119      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d003      	beq.n	8002086 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	2b03      	cmp	r3, #3
 8002084:	d107      	bne.n	8002096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002086:	4b3f      	ldr	r3, [pc, #252]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e06f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b3b      	ldr	r3, [pc, #236]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e067      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020a6:	4b37      	ldr	r3, [pc, #220]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f023 0203 	bic.w	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4934      	ldr	r1, [pc, #208]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b8:	f7ff fa0a 	bl	80014d0 <HAL_GetTick>
 80020bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	e00a      	b.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c0:	f7ff fa06 	bl	80014d0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e04f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 020c 	and.w	r2, r3, #12
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d1eb      	bne.n	80020c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e8:	4b25      	ldr	r3, [pc, #148]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d20c      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f6:	4b22      	ldr	r3, [pc, #136]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	@ (8002180 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213a:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	@ (8002184 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490a      	ldr	r1, [pc, #40]	@ (8002188 <HAL_RCC_ClockConfig+0x1c0>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	@ (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	@ (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f96a 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	080030a8 	.word	0x080030a8
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002198:	b090      	sub	sp, #64	@ 0x40
 800219a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ac:	4b59      	ldr	r3, [pc, #356]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d00d      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x40>
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	f200 80a1 	bhi.w	8002300 <HAL_RCC_GetSysClockFreq+0x16c>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d002      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x34>
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d003      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x3a>
 80021c6:	e09b      	b.n	8002300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021cc:	e09b      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b53      	ldr	r3, [pc, #332]	@ (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 80021d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021d2:	e098      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021de:	4b4d      	ldr	r3, [pc, #308]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d028      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	2200      	movs	r2, #0
 80021f2:	623b      	str	r3, [r7, #32]
 80021f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80021f6:	6a3b      	ldr	r3, [r7, #32]
 80021f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021fc:	2100      	movs	r1, #0
 80021fe:	4b47      	ldr	r3, [pc, #284]	@ (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 8002200:	fb03 f201 	mul.w	r2, r3, r1
 8002204:	2300      	movs	r3, #0
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	4413      	add	r3, r2
 800220c:	4a43      	ldr	r2, [pc, #268]	@ (800231c <HAL_RCC_GetSysClockFreq+0x188>)
 800220e:	fba0 1202 	umull	r1, r2, r0, r2
 8002212:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002214:	460a      	mov	r2, r1
 8002216:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800221a:	4413      	add	r3, r2
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002220:	2200      	movs	r2, #0
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	61fa      	str	r2, [r7, #28]
 8002226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800222e:	f7fd ffcb 	bl	80001c8 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4613      	mov	r3, r2
 8002238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800223a:	e053      	b.n	80022e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	4b35      	ldr	r3, [pc, #212]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	2200      	movs	r2, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	617a      	str	r2, [r7, #20]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800224e:	f04f 0b00 	mov.w	fp, #0
 8002252:	4652      	mov	r2, sl
 8002254:	465b      	mov	r3, fp
 8002256:	f04f 0000 	mov.w	r0, #0
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002264:	0150      	lsls	r0, r2, #5
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	ebb2 080a 	subs.w	r8, r2, sl
 800226e:	eb63 090b 	sbc.w	r9, r3, fp
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800227e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002286:	ebb2 0408 	subs.w	r4, r2, r8
 800228a:	eb63 0509 	sbc.w	r5, r3, r9
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	00eb      	lsls	r3, r5, #3
 8002298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229c:	00e2      	lsls	r2, r4, #3
 800229e:	4614      	mov	r4, r2
 80022a0:	461d      	mov	r5, r3
 80022a2:	eb14 030a 	adds.w	r3, r4, sl
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	eb45 030b 	adc.w	r3, r5, fp
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ba:	4629      	mov	r1, r5
 80022bc:	028b      	lsls	r3, r1, #10
 80022be:	4621      	mov	r1, r4
 80022c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c4:	4621      	mov	r1, r4
 80022c6:	028a      	lsls	r2, r1, #10
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ce:	2200      	movs	r2, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d8:	f7fd ff76 	bl	80001c8 <__aeabi_uldivmod>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4613      	mov	r3, r2
 80022e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	3301      	adds	r3, #1
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022fe:	e002      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <HAL_RCC_GetSysClockFreq+0x184>)
 8002302:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002308:	4618      	mov	r0, r3
 800230a:	3740      	adds	r7, #64	@ 0x40
 800230c:	46bd      	mov	sp, r7
 800230e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	00f42400 	.word	0x00f42400
 800231c:	017d7840 	.word	0x017d7840

08002320 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e041      	b.n	80023b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe ff8a 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3304      	adds	r3, #4
 800235c:	4619      	mov	r1, r3
 800235e:	4610      	mov	r0, r2
 8002360:	f000 fad8 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e041      	b.n	8002454 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d106      	bne.n	80023ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f839 	bl	800245c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3304      	adds	r3, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	4610      	mov	r0, r2
 80023fe:	f000 fa89 	bl	8002914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_TIM_PWM_Start+0x24>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	e022      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d109      	bne.n	80024ae <HAL_TIM_PWM_Start+0x3e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	e015      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d109      	bne.n	80024c8 <HAL_TIM_PWM_Start+0x58>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b01      	cmp	r3, #1
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e008      	b.n	80024da <HAL_TIM_PWM_Start+0x6a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07c      	b.n	80025dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_PWM_Start+0x82>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024f0:	e013      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d104      	bne.n	8002502 <HAL_TIM_PWM_Start+0x92>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002500:	e00b      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b08      	cmp	r3, #8
 8002506:	d104      	bne.n	8002512 <HAL_TIM_PWM_Start+0xa2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002510:	e003      	b.n	800251a <HAL_TIM_PWM_Start+0xaa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	6839      	ldr	r1, [r7, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fce6 	bl	8002ef4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a2d      	ldr	r2, [pc, #180]	@ (80025e4 <HAL_TIM_PWM_Start+0x174>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_PWM_Start+0xcc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2c      	ldr	r2, [pc, #176]	@ (80025e8 <HAL_TIM_PWM_Start+0x178>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_TIM_PWM_Start+0xd0>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_TIM_PWM_Start+0xd2>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a22      	ldr	r2, [pc, #136]	@ (80025e4 <HAL_TIM_PWM_Start+0x174>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002568:	d01d      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1f      	ldr	r2, [pc, #124]	@ (80025ec <HAL_TIM_PWM_Start+0x17c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d018      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1d      	ldr	r2, [pc, #116]	@ (80025f0 <HAL_TIM_PWM_Start+0x180>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1c      	ldr	r2, [pc, #112]	@ (80025f4 <HAL_TIM_PWM_Start+0x184>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d00e      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_TIM_PWM_Start+0x178>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a18      	ldr	r2, [pc, #96]	@ (80025f8 <HAL_TIM_PWM_Start+0x188>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d004      	beq.n	80025a6 <HAL_TIM_PWM_Start+0x136>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a16      	ldr	r2, [pc, #88]	@ (80025fc <HAL_TIM_PWM_Start+0x18c>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d111      	bne.n	80025ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b06      	cmp	r3, #6
 80025b6:	d010      	beq.n	80025da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c8:	e007      	b.n	80025da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40010000 	.word	0x40010000
 80025e8:	40010400 	.word	0x40010400
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40000c00 	.word	0x40000c00
 80025f8:	40014000 	.word	0x40014000
 80025fc:	40001800 	.word	0x40001800

08002600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ae      	b.n	800277c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f200 809f 	bhi.w	800276c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800262e:	a201      	add	r2, pc, #4	@ (adr r2, 8002634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002669 	.word	0x08002669
 8002638:	0800276d 	.word	0x0800276d
 800263c:	0800276d 	.word	0x0800276d
 8002640:	0800276d 	.word	0x0800276d
 8002644:	080026a9 	.word	0x080026a9
 8002648:	0800276d 	.word	0x0800276d
 800264c:	0800276d 	.word	0x0800276d
 8002650:	0800276d 	.word	0x0800276d
 8002654:	080026eb 	.word	0x080026eb
 8002658:	0800276d 	.word	0x0800276d
 800265c:	0800276d 	.word	0x0800276d
 8002660:	0800276d 	.word	0x0800276d
 8002664:	0800272b 	.word	0x0800272b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f9f6 	bl	8002a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6999      	ldr	r1, [r3, #24]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	619a      	str	r2, [r3, #24]
      break;
 80026a6:	e064      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fa46 	bl	8002b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	021a      	lsls	r2, r3, #8
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
      break;
 80026e8:	e043      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fa9b 	bl	8002c2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0208 	orr.w	r2, r2, #8
 8002704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	61da      	str	r2, [r3, #28]
      break;
 8002728:	e023      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 faef 	bl	8002d14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	021a      	lsls	r2, r3, #8
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	61da      	str	r2, [r3, #28]
      break;
 800276a:	e002      	b.n	8002772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
      break;
 8002770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_TIM_ConfigClockSource+0x1c>
 800279c:	2302      	movs	r3, #2
 800279e:	e0b4      	b.n	800290a <HAL_TIM_ConfigClockSource+0x186>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80027be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027d8:	d03e      	beq.n	8002858 <HAL_TIM_ConfigClockSource+0xd4>
 80027da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027de:	f200 8087 	bhi.w	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027e6:	f000 8086 	beq.w	80028f6 <HAL_TIM_ConfigClockSource+0x172>
 80027ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ee:	d87f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f0:	2b70      	cmp	r3, #112	@ 0x70
 80027f2:	d01a      	beq.n	800282a <HAL_TIM_ConfigClockSource+0xa6>
 80027f4:	2b70      	cmp	r3, #112	@ 0x70
 80027f6:	d87b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 80027f8:	2b60      	cmp	r3, #96	@ 0x60
 80027fa:	d050      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x11a>
 80027fc:	2b60      	cmp	r3, #96	@ 0x60
 80027fe:	d877      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002800:	2b50      	cmp	r3, #80	@ 0x50
 8002802:	d03c      	beq.n	800287e <HAL_TIM_ConfigClockSource+0xfa>
 8002804:	2b50      	cmp	r3, #80	@ 0x50
 8002806:	d873      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b40      	cmp	r3, #64	@ 0x40
 800280a:	d058      	beq.n	80028be <HAL_TIM_ConfigClockSource+0x13a>
 800280c:	2b40      	cmp	r3, #64	@ 0x40
 800280e:	d86f      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b30      	cmp	r3, #48	@ 0x30
 8002812:	d064      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002814:	2b30      	cmp	r3, #48	@ 0x30
 8002816:	d86b      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b20      	cmp	r3, #32
 800281a:	d060      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 800281c:	2b20      	cmp	r3, #32
 800281e:	d867      	bhi.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b00      	cmp	r3, #0
 8002822:	d05c      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002824:	2b10      	cmp	r3, #16
 8002826:	d05a      	beq.n	80028de <HAL_TIM_ConfigClockSource+0x15a>
 8002828:	e062      	b.n	80028f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800283a:	f000 fb3b 	bl	8002eb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800284c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	609a      	str	r2, [r3, #8]
      break;
 8002856:	e04f      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002868:	f000 fb24 	bl	8002eb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800287a:	609a      	str	r2, [r3, #8]
      break;
 800287c:	e03c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fa98 	bl	8002dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2150      	movs	r1, #80	@ 0x50
 8002896:	4618      	mov	r0, r3
 8002898:	f000 faf1 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 800289c:	e02c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 fab7 	bl	8002e1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2160      	movs	r1, #96	@ 0x60
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fae1 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 80028bc:	e01c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ca:	461a      	mov	r2, r3
 80028cc:	f000 fa78 	bl	8002dc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2140      	movs	r1, #64	@ 0x40
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fad1 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 80028dc:	e00c      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	4610      	mov	r0, r2
 80028ea:	f000 fac8 	bl	8002e7e <TIM_ITRx_SetConfig>
      break;
 80028ee:	e003      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e000      	b.n	80028f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002908:	7bfb      	ldrb	r3, [r7, #15]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a43      	ldr	r2, [pc, #268]	@ (8002a34 <TIM_Base_SetConfig+0x120>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d013      	beq.n	8002954 <TIM_Base_SetConfig+0x40>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002932:	d00f      	beq.n	8002954 <TIM_Base_SetConfig+0x40>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a40      	ldr	r2, [pc, #256]	@ (8002a38 <TIM_Base_SetConfig+0x124>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00b      	beq.n	8002954 <TIM_Base_SetConfig+0x40>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a3c <TIM_Base_SetConfig+0x128>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d007      	beq.n	8002954 <TIM_Base_SetConfig+0x40>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a3e      	ldr	r2, [pc, #248]	@ (8002a40 <TIM_Base_SetConfig+0x12c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d003      	beq.n	8002954 <TIM_Base_SetConfig+0x40>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a44 <TIM_Base_SetConfig+0x130>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d108      	bne.n	8002966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800295a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a32      	ldr	r2, [pc, #200]	@ (8002a34 <TIM_Base_SetConfig+0x120>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002974:	d027      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a2f      	ldr	r2, [pc, #188]	@ (8002a38 <TIM_Base_SetConfig+0x124>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d023      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2e      	ldr	r2, [pc, #184]	@ (8002a3c <TIM_Base_SetConfig+0x128>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a2d      	ldr	r2, [pc, #180]	@ (8002a40 <TIM_Base_SetConfig+0x12c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d01b      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a2c      	ldr	r2, [pc, #176]	@ (8002a44 <TIM_Base_SetConfig+0x130>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d017      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a2b      	ldr	r2, [pc, #172]	@ (8002a48 <TIM_Base_SetConfig+0x134>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a4c <TIM_Base_SetConfig+0x138>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00f      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a29      	ldr	r2, [pc, #164]	@ (8002a50 <TIM_Base_SetConfig+0x13c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00b      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a28      	ldr	r2, [pc, #160]	@ (8002a54 <TIM_Base_SetConfig+0x140>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a27      	ldr	r2, [pc, #156]	@ (8002a58 <TIM_Base_SetConfig+0x144>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d003      	beq.n	80029c6 <TIM_Base_SetConfig+0xb2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a26      	ldr	r2, [pc, #152]	@ (8002a5c <TIM_Base_SetConfig+0x148>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d108      	bne.n	80029d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a34 <TIM_Base_SetConfig+0x120>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d003      	beq.n	8002a06 <TIM_Base_SetConfig+0xf2>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a10      	ldr	r2, [pc, #64]	@ (8002a44 <TIM_Base_SetConfig+0x130>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d103      	bne.n	8002a0e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	691a      	ldr	r2, [r3, #16]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f043 0204 	orr.w	r2, r3, #4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40010000 	.word	0x40010000
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800
 8002a40:	40000c00 	.word	0x40000c00
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	40001800 	.word	0x40001800
 8002a58:	40001c00 	.word	0x40001c00
 8002a5c:	40002000 	.word	0x40002000

08002a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f023 0201 	bic.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f023 0302 	bic.w	r3, r3, #2
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a20      	ldr	r2, [pc, #128]	@ (8002b38 <TIM_OC1_SetConfig+0xd8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_OC1_SetConfig+0x64>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1f      	ldr	r2, [pc, #124]	@ (8002b3c <TIM_OC1_SetConfig+0xdc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10c      	bne.n	8002ade <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0308 	bic.w	r3, r3, #8
 8002aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f023 0304 	bic.w	r3, r3, #4
 8002adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a15      	ldr	r2, [pc, #84]	@ (8002b38 <TIM_OC1_SetConfig+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_OC1_SetConfig+0x8e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <TIM_OC1_SetConfig+0xdc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d111      	bne.n	8002b12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400

08002b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 0210 	bic.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f023 0320 	bic.w	r3, r3, #32
 8002b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a22      	ldr	r2, [pc, #136]	@ (8002c24 <TIM_OC2_SetConfig+0xe4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_OC2_SetConfig+0x68>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	@ (8002c28 <TIM_OC2_SetConfig+0xe8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10d      	bne.n	8002bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a17      	ldr	r2, [pc, #92]	@ (8002c24 <TIM_OC2_SetConfig+0xe4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d003      	beq.n	8002bd4 <TIM_OC2_SetConfig+0x94>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a16      	ldr	r2, [pc, #88]	@ (8002c28 <TIM_OC2_SetConfig+0xe8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d113      	bne.n	8002bfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	621a      	str	r2, [r3, #32]
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40010400 	.word	0x40010400

08002c2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a21      	ldr	r2, [pc, #132]	@ (8002d0c <TIM_OC3_SetConfig+0xe0>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d003      	beq.n	8002c92 <TIM_OC3_SetConfig+0x66>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	@ (8002d10 <TIM_OC3_SetConfig+0xe4>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10d      	bne.n	8002cae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a16      	ldr	r2, [pc, #88]	@ (8002d0c <TIM_OC3_SetConfig+0xe0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_OC3_SetConfig+0x92>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <TIM_OC3_SetConfig+0xe4>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d113      	bne.n	8002ce6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	bf00      	nop
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40010400 	.word	0x40010400

08002d14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	031b      	lsls	r3, r3, #12
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <TIM_OC4_SetConfig+0xa4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_OC4_SetConfig+0x68>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <TIM_OC4_SetConfig+0xa8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d109      	bne.n	8002d90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	621a      	str	r2, [r3, #32]
}
 8002daa:	bf00      	nop
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	40010400 	.word	0x40010400

08002dc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f023 0201 	bic.w	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f023 030a 	bic.w	r3, r3, #10
 8002dfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	621a      	str	r2, [r3, #32]
}
 8002e12:	bf00      	nop
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 0210 	bic.w	r2, r3, #16
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	031b      	lsls	r3, r3, #12
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b085      	sub	sp, #20
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f043 0307 	orr.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ece:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	609a      	str	r2, [r3, #8]
}
 8002ee8:	bf00      	nop
 8002eea:	371c      	adds	r7, #28
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2201      	movs	r2, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e05a      	b.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	@ (800301c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1d      	ldr	r2, [pc, #116]	@ (8003020 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8003024 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a18      	ldr	r2, [pc, #96]	@ (800302c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a15      	ldr	r2, [pc, #84]	@ (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10c      	bne.n	8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40010000 	.word	0x40010000
 8003020:	40000400 	.word	0x40000400
 8003024:	40000800 	.word	0x40000800
 8003028:	40000c00 	.word	0x40000c00
 800302c:	40010400 	.word	0x40010400
 8003030:	40014000 	.word	0x40014000
 8003034:	40001800 	.word	0x40001800

08003038 <memset>:
 8003038:	4402      	add	r2, r0
 800303a:	4603      	mov	r3, r0
 800303c:	4293      	cmp	r3, r2
 800303e:	d100      	bne.n	8003042 <memset+0xa>
 8003040:	4770      	bx	lr
 8003042:	f803 1b01 	strb.w	r1, [r3], #1
 8003046:	e7f9      	b.n	800303c <memset+0x4>

08003048 <__libc_init_array>:
 8003048:	b570      	push	{r4, r5, r6, lr}
 800304a:	4d0d      	ldr	r5, [pc, #52]	@ (8003080 <__libc_init_array+0x38>)
 800304c:	4c0d      	ldr	r4, [pc, #52]	@ (8003084 <__libc_init_array+0x3c>)
 800304e:	1b64      	subs	r4, r4, r5
 8003050:	10a4      	asrs	r4, r4, #2
 8003052:	2600      	movs	r6, #0
 8003054:	42a6      	cmp	r6, r4
 8003056:	d109      	bne.n	800306c <__libc_init_array+0x24>
 8003058:	4d0b      	ldr	r5, [pc, #44]	@ (8003088 <__libc_init_array+0x40>)
 800305a:	4c0c      	ldr	r4, [pc, #48]	@ (800308c <__libc_init_array+0x44>)
 800305c:	f000 f818 	bl	8003090 <_init>
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	2600      	movs	r6, #0
 8003066:	42a6      	cmp	r6, r4
 8003068:	d105      	bne.n	8003076 <__libc_init_array+0x2e>
 800306a:	bd70      	pop	{r4, r5, r6, pc}
 800306c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003070:	4798      	blx	r3
 8003072:	3601      	adds	r6, #1
 8003074:	e7ee      	b.n	8003054 <__libc_init_array+0xc>
 8003076:	f855 3b04 	ldr.w	r3, [r5], #4
 800307a:	4798      	blx	r3
 800307c:	3601      	adds	r6, #1
 800307e:	e7f2      	b.n	8003066 <__libc_init_array+0x1e>
 8003080:	080030c0 	.word	0x080030c0
 8003084:	080030c0 	.word	0x080030c0
 8003088:	080030c0 	.word	0x080030c0
 800308c:	080030c4 	.word	0x080030c4

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
